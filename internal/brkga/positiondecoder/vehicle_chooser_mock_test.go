// Code generated by MockGen. DO NOT EDIT.
// Source: position_decoder.go
//
// Generated by this command:
//
//	mockgen -source=position_decoder.go -destination=vehicle_chooser_mock_test.go
//

// Package mock_positiondecoder is a generated GoMock package.
package positiondecoder

import (
	reflect "reflect"

	brkga "github.com/victorguarana/vehicle-routing/internal/brkga"
	vehicle "github.com/victorguarana/vehicle-routing/internal/vehicle"
	gomock "go.uber.org/mock/gomock"
)

// MockvehicleChooser is a mock of vehicleChooser interface.
type MockvehicleChooser struct {
	ctrl     *gomock.Controller
	recorder *MockvehicleChooserMockRecorder
}

// MockvehicleChooserMockRecorder is the mock recorder for MockvehicleChooser.
type MockvehicleChooserMockRecorder struct {
	mock *MockvehicleChooser
}

// NewMockvehicleChooser creates a new mock instance.
func NewMockvehicleChooser(ctrl *gomock.Controller) *MockvehicleChooser {
	mock := &MockvehicleChooser{ctrl: ctrl}
	mock.recorder = &MockvehicleChooserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockvehicleChooser) EXPECT() *MockvehicleChooserMockRecorder {
	return m.recorder
}

// defineVehicle mocks base method.
func (m *MockvehicleChooser) defineVehicle(chromossome *brkga.Chromossome) (vehicle.ICar, vehicle.IDrone) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "defineVehicle", chromossome)
	ret0, _ := ret[0].(vehicle.ICar)
	ret1, _ := ret[1].(vehicle.IDrone)
	return ret0, ret1
}

// defineVehicle indicates an expected call of defineVehicle.
func (mr *MockvehicleChooserMockRecorder) defineVehicle(chromossome any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "defineVehicle", reflect.TypeOf((*MockvehicleChooser)(nil).defineVehicle), chromossome)
}
