// Code generated by MockGen. DO NOT EDIT.
// Source: decoder.go
//
// Generated by this command:
//
//	mockgen -source=decoder.go -destination=strategy_mock_test.go -package=decoder
//

// Package decoder is a generated GoMock package.
package decoder

import (
	reflect "reflect"

	brkga "github.com/victorguarana/vehicle-routing/internal/brkga"
	vehicle "github.com/victorguarana/vehicle-routing/internal/vehicle"
	gomock "go.uber.org/mock/gomock"
)

// Mockstrategy is a mock of strategy interface.
type Mockstrategy struct {
	ctrl     *gomock.Controller
	recorder *MockstrategyMockRecorder
}

// MockstrategyMockRecorder is the mock recorder for Mockstrategy.
type MockstrategyMockRecorder struct {
	mock *Mockstrategy
}

// NewMockstrategy creates a new mock instance.
func NewMockstrategy(ctrl *gomock.Controller) *Mockstrategy {
	mock := &Mockstrategy{ctrl: ctrl}
	mock.recorder = &MockstrategyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockstrategy) EXPECT() *MockstrategyMockRecorder {
	return m.recorder
}

// DefineVehicle mocks base method.
func (m *Mockstrategy) DefineVehicle(carList []vehicle.ICar, chromossome *brkga.Chromossome) (vehicle.ICar, vehicle.IDrone) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DefineVehicle", carList, chromossome)
	ret0, _ := ret[0].(vehicle.ICar)
	ret1, _ := ret[1].(vehicle.IDrone)
	return ret0, ret1
}

// DefineVehicle indicates an expected call of DefineVehicle.
func (mr *MockstrategyMockRecorder) DefineVehicle(carList, chromossome any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DefineVehicle", reflect.TypeOf((*Mockstrategy)(nil).DefineVehicle), carList, chromossome)
}
