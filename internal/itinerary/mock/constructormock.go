// Code generated by MockGen. DO NOT EDIT.
// Source: constructor.go
//
// Generated by this command:
//
//	mockgen -source=constructor.go -destination=mock/constructormock.go
//

// Package mock_itinerary is a generated GoMock package.
package mock_itinerary

import (
	reflect "reflect"

	gps "github.com/victorguarana/vehicle-routing/internal/gps"
	itinerary "github.com/victorguarana/vehicle-routing/internal/itinerary"
	route "github.com/victorguarana/vehicle-routing/internal/route"
	slc "github.com/victorguarana/vehicle-routing/internal/slc"
	vehicle "github.com/victorguarana/vehicle-routing/internal/vehicle"
	gomock "go.uber.org/mock/gomock"
)

// MockConstructor is a mock of Constructor interface.
type MockConstructor struct {
	ctrl     *gomock.Controller
	recorder *MockConstructorMockRecorder
}

// MockConstructorMockRecorder is the mock recorder for MockConstructor.
type MockConstructorMockRecorder struct {
	mock *MockConstructor
}

// NewMockConstructor creates a new mock instance.
func NewMockConstructor(ctrl *gomock.Controller) *MockConstructor {
	mock := &MockConstructor{ctrl: ctrl}
	mock.recorder = &MockConstructorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConstructor) EXPECT() *MockConstructorMockRecorder {
	return m.recorder
}

// ActualCarPoint mocks base method.
func (m *MockConstructor) ActualCarPoint() gps.Point {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActualCarPoint")
	ret0, _ := ret[0].(gps.Point)
	return ret0
}

// ActualCarPoint indicates an expected call of ActualCarPoint.
func (mr *MockConstructorMockRecorder) ActualCarPoint() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActualCarPoint", reflect.TypeOf((*MockConstructor)(nil).ActualCarPoint))
}

// ActualCarStop mocks base method.
func (m *MockConstructor) ActualCarStop() route.IMainStop {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActualCarStop")
	ret0, _ := ret[0].(route.IMainStop)
	return ret0
}

// ActualCarStop indicates an expected call of ActualCarStop.
func (mr *MockConstructorMockRecorder) ActualCarStop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActualCarStop", reflect.TypeOf((*MockConstructor)(nil).ActualCarStop))
}

// CarEfficiency mocks base method.
func (m *MockConstructor) CarEfficiency() float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CarEfficiency")
	ret0, _ := ret[0].(float64)
	return ret0
}

// CarEfficiency indicates an expected call of CarEfficiency.
func (mr *MockConstructorMockRecorder) CarEfficiency() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CarEfficiency", reflect.TypeOf((*MockConstructor)(nil).CarEfficiency))
}

// CarSpeed mocks base method.
func (m *MockConstructor) CarSpeed() float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CarSpeed")
	ret0, _ := ret[0].(float64)
	return ret0
}

// CarSpeed indicates an expected call of CarSpeed.
func (mr *MockConstructorMockRecorder) CarSpeed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CarSpeed", reflect.TypeOf((*MockConstructor)(nil).CarSpeed))
}

// CarSupport mocks base method.
func (m *MockConstructor) CarSupport(nextPoints ...gps.Point) bool {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range nextPoints {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CarSupport", varargs...)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CarSupport indicates an expected call of CarSupport.
func (mr *MockConstructorMockRecorder) CarSupport(nextPoints ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CarSupport", reflect.TypeOf((*MockConstructor)(nil).CarSupport), nextPoints...)
}

// DroneCanReach mocks base method.
func (m *MockConstructor) DroneCanReach(drone vehicle.IDrone, nextPoints ...gps.Point) bool {
	m.ctrl.T.Helper()
	varargs := []any{drone}
	for _, a := range nextPoints {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DroneCanReach", varargs...)
	ret0, _ := ret[0].(bool)
	return ret0
}

// DroneCanReach indicates an expected call of DroneCanReach.
func (mr *MockConstructorMockRecorder) DroneCanReach(drone any, nextPoints ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{drone}, nextPoints...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DroneCanReach", reflect.TypeOf((*MockConstructor)(nil).DroneCanReach), varargs...)
}

// DroneEfficiency mocks base method.
func (m *MockConstructor) DroneEfficiency() float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DroneEfficiency")
	ret0, _ := ret[0].(float64)
	return ret0
}

// DroneEfficiency indicates an expected call of DroneEfficiency.
func (mr *MockConstructorMockRecorder) DroneEfficiency() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DroneEfficiency", reflect.TypeOf((*MockConstructor)(nil).DroneEfficiency))
}

// DroneIsFlying mocks base method.
func (m *MockConstructor) DroneIsFlying(drone vehicle.IDrone) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DroneIsFlying", drone)
	ret0, _ := ret[0].(bool)
	return ret0
}

// DroneIsFlying indicates an expected call of DroneIsFlying.
func (mr *MockConstructorMockRecorder) DroneIsFlying(drone any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DroneIsFlying", reflect.TypeOf((*MockConstructor)(nil).DroneIsFlying), drone)
}

// DroneSpeed mocks base method.
func (m *MockConstructor) DroneSpeed() float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DroneSpeed")
	ret0, _ := ret[0].(float64)
	return ret0
}

// DroneSpeed indicates an expected call of DroneSpeed.
func (mr *MockConstructorMockRecorder) DroneSpeed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DroneSpeed", reflect.TypeOf((*MockConstructor)(nil).DroneSpeed))
}

// DroneSupport mocks base method.
func (m *MockConstructor) DroneSupport(drone vehicle.IDrone, deliveryPoint, landingPoint gps.Point) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DroneSupport", drone, deliveryPoint, landingPoint)
	ret0, _ := ret[0].(bool)
	return ret0
}

// DroneSupport indicates an expected call of DroneSupport.
func (mr *MockConstructorMockRecorder) DroneSupport(drone, deliveryPoint, landingPoint any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DroneSupport", reflect.TypeOf((*MockConstructor)(nil).DroneSupport), drone, deliveryPoint, landingPoint)
}

// Drones mocks base method.
func (m *MockConstructor) Drones() []vehicle.IDrone {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Drones")
	ret0, _ := ret[0].([]vehicle.IDrone)
	return ret0
}

// Drones indicates an expected call of Drones.
func (mr *MockConstructorMockRecorder) Drones() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Drones", reflect.TypeOf((*MockConstructor)(nil).Drones))
}

// LandAllDrones mocks base method.
func (m *MockConstructor) LandAllDrones(landingStop route.IMainStop) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LandAllDrones", landingStop)
}

// LandAllDrones indicates an expected call of LandAllDrones.
func (mr *MockConstructorMockRecorder) LandAllDrones(landingStop any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LandAllDrones", reflect.TypeOf((*MockConstructor)(nil).LandAllDrones), landingStop)
}

// LandDrone mocks base method.
func (m *MockConstructor) LandDrone(drone vehicle.IDrone, destination route.IMainStop) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LandDrone", drone, destination)
}

// LandDrone indicates an expected call of LandDrone.
func (mr *MockConstructorMockRecorder) LandDrone(drone, destination any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LandDrone", reflect.TypeOf((*MockConstructor)(nil).LandDrone), drone, destination)
}

// MoveCar mocks base method.
func (m *MockConstructor) MoveCar(destination gps.Point) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MoveCar", destination)
}

// MoveCar indicates an expected call of MoveCar.
func (mr *MockConstructorMockRecorder) MoveCar(destination any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoveCar", reflect.TypeOf((*MockConstructor)(nil).MoveCar), destination)
}

// MoveDrone mocks base method.
func (m *MockConstructor) MoveDrone(drone vehicle.IDrone, destination gps.Point) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MoveDrone", drone, destination)
}

// MoveDrone indicates an expected call of MoveDrone.
func (mr *MockConstructorMockRecorder) MoveDrone(drone, destination any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoveDrone", reflect.TypeOf((*MockConstructor)(nil).MoveDrone), drone, destination)
}

// RouteIterator mocks base method.
func (m *MockConstructor) RouteIterator() slc.Iterator[route.IMainStop] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RouteIterator")
	ret0, _ := ret[0].(slc.Iterator[route.IMainStop])
	return ret0
}

// RouteIterator indicates an expected call of RouteIterator.
func (mr *MockConstructorMockRecorder) RouteIterator() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RouteIterator", reflect.TypeOf((*MockConstructor)(nil).RouteIterator))
}

// StartDroneFlight mocks base method.
func (m *MockConstructor) StartDroneFlight(drone vehicle.IDrone, startingPoint route.IMainStop) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StartDroneFlight", drone, startingPoint)
}

// StartDroneFlight indicates an expected call of StartDroneFlight.
func (mr *MockConstructorMockRecorder) StartDroneFlight(drone, startingPoint any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartDroneFlight", reflect.TypeOf((*MockConstructor)(nil).StartDroneFlight), drone, startingPoint)
}

// SubItineraryList mocks base method.
func (m *MockConstructor) SubItineraryList() []itinerary.SubItinerary {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubItineraryList")
	ret0, _ := ret[0].([]itinerary.SubItinerary)
	return ret0
}

// SubItineraryList indicates an expected call of SubItineraryList.
func (mr *MockConstructorMockRecorder) SubItineraryList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubItineraryList", reflect.TypeOf((*MockConstructor)(nil).SubItineraryList))
}
