// Code generated by MockGen. DO NOT EDIT.
// Source: constructor.go
//
// Generated by this command:
//
//	mockgen -source=constructor.go -destination=mock/constructormock.go
//

// Package mock_itinerary is a generated GoMock package.
package mock_itinerary

import (
	reflect "reflect"

	gps "github.com/victorguarana/vehicle-routing/internal/gps"
	itinerary "github.com/victorguarana/vehicle-routing/internal/itinerary"
	route "github.com/victorguarana/vehicle-routing/internal/route"
	slc "github.com/victorguarana/vehicle-routing/internal/slc"
	vehicle "github.com/victorguarana/vehicle-routing/internal/vehicle"
	gomock "go.uber.org/mock/gomock"
)

// MockConstructor is a mock of Constructor interface.
type MockConstructor struct {
	ctrl     *gomock.Controller
	recorder *MockConstructorMockRecorder
}

// MockConstructorMockRecorder is the mock recorder for MockConstructor.
type MockConstructorMockRecorder struct {
	mock *MockConstructor
}

// NewMockConstructor creates a new mock instance.
func NewMockConstructor(ctrl *gomock.Controller) *MockConstructor {
	mock := &MockConstructor{ctrl: ctrl}
	mock.recorder = &MockConstructorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConstructor) EXPECT() *MockConstructorMockRecorder {
	return m.recorder
}

// ActualCarPoint mocks base method.
func (m *MockConstructor) ActualCarPoint() gps.Point {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActualCarPoint")
	ret0, _ := ret[0].(gps.Point)
	return ret0
}

// ActualCarPoint indicates an expected call of ActualCarPoint.
func (mr *MockConstructorMockRecorder) ActualCarPoint() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActualCarPoint", reflect.TypeOf((*MockConstructor)(nil).ActualCarPoint))
}

// ActualCarStop mocks base method.
func (m *MockConstructor) ActualCarStop() route.IMainStop {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActualCarStop")
	ret0, _ := ret[0].(route.IMainStop)
	return ret0
}

// ActualCarStop indicates an expected call of ActualCarStop.
func (mr *MockConstructorMockRecorder) ActualCarStop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActualCarStop", reflect.TypeOf((*MockConstructor)(nil).ActualCarStop))
}

// Car mocks base method.
func (m *MockConstructor) Car() vehicle.ICar {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Car")
	ret0, _ := ret[0].(vehicle.ICar)
	return ret0
}

// Car indicates an expected call of Car.
func (mr *MockConstructorMockRecorder) Car() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Car", reflect.TypeOf((*MockConstructor)(nil).Car))
}

// LandAllDrones mocks base method.
func (m *MockConstructor) LandAllDrones(landingStop route.IMainStop) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LandAllDrones", landingStop)
}

// LandAllDrones indicates an expected call of LandAllDrones.
func (mr *MockConstructorMockRecorder) LandAllDrones(landingStop any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LandAllDrones", reflect.TypeOf((*MockConstructor)(nil).LandAllDrones), landingStop)
}

// LandDrone mocks base method.
func (m *MockConstructor) LandDrone(drone vehicle.IDrone, destination route.IMainStop) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LandDrone", drone, destination)
}

// LandDrone indicates an expected call of LandDrone.
func (mr *MockConstructorMockRecorder) LandDrone(drone, destination any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LandDrone", reflect.TypeOf((*MockConstructor)(nil).LandDrone), drone, destination)
}

// MainRoute mocks base method.
func (m *MockConstructor) MainRoute() route.IMainRoute {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MainRoute")
	ret0, _ := ret[0].(route.IMainRoute)
	return ret0
}

// MainRoute indicates an expected call of MainRoute.
func (mr *MockConstructorMockRecorder) MainRoute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MainRoute", reflect.TypeOf((*MockConstructor)(nil).MainRoute))
}

// MoveCar mocks base method.
func (m *MockConstructor) MoveCar(destination gps.Point) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MoveCar", destination)
}

// MoveCar indicates an expected call of MoveCar.
func (mr *MockConstructorMockRecorder) MoveCar(destination any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoveCar", reflect.TypeOf((*MockConstructor)(nil).MoveCar), destination)
}

// MoveDrone mocks base method.
func (m *MockConstructor) MoveDrone(drone vehicle.IDrone, destination gps.Point) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MoveDrone", drone, destination)
}

// MoveDrone indicates an expected call of MoveDrone.
func (mr *MockConstructorMockRecorder) MoveDrone(drone, destination any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoveDrone", reflect.TypeOf((*MockConstructor)(nil).MoveDrone), drone, destination)
}

// RouteIterator mocks base method.
func (m *MockConstructor) RouteIterator() slc.Iterator[route.IMainStop] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RouteIterator")
	ret0, _ := ret[0].(slc.Iterator[route.IMainStop])
	return ret0
}

// RouteIterator indicates an expected call of RouteIterator.
func (mr *MockConstructorMockRecorder) RouteIterator() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RouteIterator", reflect.TypeOf((*MockConstructor)(nil).RouteIterator))
}

// StartDroneFlight mocks base method.
func (m *MockConstructor) StartDroneFlight(drone vehicle.IDrone, startingPoint route.IMainStop) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StartDroneFlight", drone, startingPoint)
}

// StartDroneFlight indicates an expected call of StartDroneFlight.
func (mr *MockConstructorMockRecorder) StartDroneFlight(drone, startingPoint any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartDroneFlight", reflect.TypeOf((*MockConstructor)(nil).StartDroneFlight), drone, startingPoint)
}

// SubItineraryList mocks base method.
func (m *MockConstructor) SubItineraryList() []itinerary.SubItinerary {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubItineraryList")
	ret0, _ := ret[0].([]itinerary.SubItinerary)
	return ret0
}

// SubItineraryList indicates an expected call of SubItineraryList.
func (mr *MockConstructorMockRecorder) SubItineraryList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubItineraryList", reflect.TypeOf((*MockConstructor)(nil).SubItineraryList))
}
