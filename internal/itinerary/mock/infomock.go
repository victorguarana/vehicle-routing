// Code generated by MockGen. DO NOT EDIT.
// Source: info.go
//
// Generated by this command:
//
//	mockgen -source=info.go -destination=mock/infomock.go
//

// Package mock_itinerary is a generated GoMock package.
package mock_itinerary

import (
	reflect "reflect"

	gps "github.com/victorguarana/vehicle-routing/internal/gps"
	itinerary "github.com/victorguarana/vehicle-routing/internal/itinerary"
	route "github.com/victorguarana/vehicle-routing/internal/route"
	slc "github.com/victorguarana/vehicle-routing/internal/slc"
	vehicle "github.com/victorguarana/vehicle-routing/internal/vehicle"
	gomock "go.uber.org/mock/gomock"
)

// MockInfo is a mock of Info interface.
type MockInfo struct {
	ctrl     *gomock.Controller
	recorder *MockInfoMockRecorder
}

// MockInfoMockRecorder is the mock recorder for MockInfo.
type MockInfoMockRecorder struct {
	mock *MockInfo
}

// NewMockInfo creates a new mock instance.
func NewMockInfo(ctrl *gomock.Controller) *MockInfo {
	mock := &MockInfo{ctrl: ctrl}
	mock.recorder = &MockInfoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInfo) EXPECT() *MockInfoMockRecorder {
	return m.recorder
}

// ActualCarPoint mocks base method.
func (m *MockInfo) ActualCarPoint() gps.Point {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActualCarPoint")
	ret0, _ := ret[0].(gps.Point)
	return ret0
}

// ActualCarPoint indicates an expected call of ActualCarPoint.
func (mr *MockInfoMockRecorder) ActualCarPoint() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActualCarPoint", reflect.TypeOf((*MockInfo)(nil).ActualCarPoint))
}

// ActualCarStop mocks base method.
func (m *MockInfo) ActualCarStop() route.IMainStop {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActualCarStop")
	ret0, _ := ret[0].(route.IMainStop)
	return ret0
}

// ActualCarStop indicates an expected call of ActualCarStop.
func (mr *MockInfoMockRecorder) ActualCarStop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActualCarStop", reflect.TypeOf((*MockInfo)(nil).ActualCarStop))
}

// CarEfficiency mocks base method.
func (m *MockInfo) CarEfficiency() float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CarEfficiency")
	ret0, _ := ret[0].(float64)
	return ret0
}

// CarEfficiency indicates an expected call of CarEfficiency.
func (mr *MockInfoMockRecorder) CarEfficiency() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CarEfficiency", reflect.TypeOf((*MockInfo)(nil).CarEfficiency))
}

// CarSpeed mocks base method.
func (m *MockInfo) CarSpeed() float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CarSpeed")
	ret0, _ := ret[0].(float64)
	return ret0
}

// CarSpeed indicates an expected call of CarSpeed.
func (mr *MockInfoMockRecorder) CarSpeed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CarSpeed", reflect.TypeOf((*MockInfo)(nil).CarSpeed))
}

// CarSupport mocks base method.
func (m *MockInfo) CarSupport(nextPoints ...gps.Point) bool {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range nextPoints {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CarSupport", varargs...)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CarSupport indicates an expected call of CarSupport.
func (mr *MockInfoMockRecorder) CarSupport(nextPoints ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CarSupport", reflect.TypeOf((*MockInfo)(nil).CarSupport), nextPoints...)
}

// DroneCanReach mocks base method.
func (m *MockInfo) DroneCanReach(drone vehicle.IDrone, nextPoints ...gps.Point) bool {
	m.ctrl.T.Helper()
	varargs := []any{drone}
	for _, a := range nextPoints {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DroneCanReach", varargs...)
	ret0, _ := ret[0].(bool)
	return ret0
}

// DroneCanReach indicates an expected call of DroneCanReach.
func (mr *MockInfoMockRecorder) DroneCanReach(drone any, nextPoints ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{drone}, nextPoints...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DroneCanReach", reflect.TypeOf((*MockInfo)(nil).DroneCanReach), varargs...)
}

// DroneEfficiency mocks base method.
func (m *MockInfo) DroneEfficiency() float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DroneEfficiency")
	ret0, _ := ret[0].(float64)
	return ret0
}

// DroneEfficiency indicates an expected call of DroneEfficiency.
func (mr *MockInfoMockRecorder) DroneEfficiency() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DroneEfficiency", reflect.TypeOf((*MockInfo)(nil).DroneEfficiency))
}

// DroneIsFlying mocks base method.
func (m *MockInfo) DroneIsFlying(drone vehicle.IDrone) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DroneIsFlying", drone)
	ret0, _ := ret[0].(bool)
	return ret0
}

// DroneIsFlying indicates an expected call of DroneIsFlying.
func (mr *MockInfoMockRecorder) DroneIsFlying(drone any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DroneIsFlying", reflect.TypeOf((*MockInfo)(nil).DroneIsFlying), drone)
}

// DroneSpeed mocks base method.
func (m *MockInfo) DroneSpeed() float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DroneSpeed")
	ret0, _ := ret[0].(float64)
	return ret0
}

// DroneSpeed indicates an expected call of DroneSpeed.
func (mr *MockInfoMockRecorder) DroneSpeed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DroneSpeed", reflect.TypeOf((*MockInfo)(nil).DroneSpeed))
}

// DroneSupport mocks base method.
func (m *MockInfo) DroneSupport(drone vehicle.IDrone, deliveryPoint, landingPoint gps.Point) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DroneSupport", drone, deliveryPoint, landingPoint)
	ret0, _ := ret[0].(bool)
	return ret0
}

// DroneSupport indicates an expected call of DroneSupport.
func (mr *MockInfoMockRecorder) DroneSupport(drone, deliveryPoint, landingPoint any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DroneSupport", reflect.TypeOf((*MockInfo)(nil).DroneSupport), drone, deliveryPoint, landingPoint)
}

// Drones mocks base method.
func (m *MockInfo) Drones() []vehicle.IDrone {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Drones")
	ret0, _ := ret[0].([]vehicle.IDrone)
	return ret0
}

// Drones indicates an expected call of Drones.
func (mr *MockInfoMockRecorder) Drones() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Drones", reflect.TypeOf((*MockInfo)(nil).Drones))
}

// RouteIterator mocks base method.
func (m *MockInfo) RouteIterator() slc.Iterator[route.IMainStop] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RouteIterator")
	ret0, _ := ret[0].(slc.Iterator[route.IMainStop])
	return ret0
}

// RouteIterator indicates an expected call of RouteIterator.
func (mr *MockInfoMockRecorder) RouteIterator() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RouteIterator", reflect.TypeOf((*MockInfo)(nil).RouteIterator))
}

// SubItineraryList mocks base method.
func (m *MockInfo) SubItineraryList() []itinerary.SubItinerary {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubItineraryList")
	ret0, _ := ret[0].([]itinerary.SubItinerary)
	return ret0
}

// SubItineraryList indicates an expected call of SubItineraryList.
func (mr *MockInfoMockRecorder) SubItineraryList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubItineraryList", reflect.TypeOf((*MockInfo)(nil).SubItineraryList))
}
