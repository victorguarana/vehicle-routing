// Code generated by MockGen. DO NOT EDIT.
// Source: modifier.go
//
// Generated by this command:
//
//	mockgen -source=modifier.go -destination=mock/modifiermock.go
//

// Package mock_itinerary is a generated GoMock package.
package mock_itinerary

import (
	reflect "reflect"

	gps "github.com/victorguarana/vehicle-routing/internal/gps"
	itinerary "github.com/victorguarana/vehicle-routing/internal/itinerary"
	route "github.com/victorguarana/vehicle-routing/internal/route"
	slc "github.com/victorguarana/vehicle-routing/internal/slc"
	vehicle "github.com/victorguarana/vehicle-routing/internal/vehicle"
	gomock "go.uber.org/mock/gomock"
)

// MockModifier is a mock of Modifier interface.
type MockModifier struct {
	ctrl     *gomock.Controller
	recorder *MockModifierMockRecorder
}

// MockModifierMockRecorder is the mock recorder for MockModifier.
type MockModifierMockRecorder struct {
	mock *MockModifier
}

// NewMockModifier creates a new mock instance.
func NewMockModifier(ctrl *gomock.Controller) *MockModifier {
	mock := &MockModifier{ctrl: ctrl}
	mock.recorder = &MockModifierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModifier) EXPECT() *MockModifierMockRecorder {
	return m.recorder
}

// ActualCarPoint mocks base method.
func (m *MockModifier) ActualCarPoint() gps.Point {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActualCarPoint")
	ret0, _ := ret[0].(gps.Point)
	return ret0
}

// ActualCarPoint indicates an expected call of ActualCarPoint.
func (mr *MockModifierMockRecorder) ActualCarPoint() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActualCarPoint", reflect.TypeOf((*MockModifier)(nil).ActualCarPoint))
}

// ActualCarStop mocks base method.
func (m *MockModifier) ActualCarStop() route.IMainStop {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActualCarStop")
	ret0, _ := ret[0].(route.IMainStop)
	return ret0
}

// ActualCarStop indicates an expected call of ActualCarStop.
func (mr *MockModifierMockRecorder) ActualCarStop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActualCarStop", reflect.TypeOf((*MockModifier)(nil).ActualCarStop))
}

// Car mocks base method.
func (m *MockModifier) Car() vehicle.ICar {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Car")
	ret0, _ := ret[0].(vehicle.ICar)
	return ret0
}

// Car indicates an expected call of Car.
func (mr *MockModifierMockRecorder) Car() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Car", reflect.TypeOf((*MockModifier)(nil).Car))
}

// InsertCarDelivery mocks base method.
func (m *MockModifier) InsertCarDelivery(point gps.Point, calcCost func(itinerary.Info) float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertCarDelivery", point, calcCost)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertCarDelivery indicates an expected call of InsertCarDelivery.
func (mr *MockModifierMockRecorder) InsertCarDelivery(point, calcCost any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertCarDelivery", reflect.TypeOf((*MockModifier)(nil).InsertCarDelivery), point, calcCost)
}

// InsertDroneDelivery mocks base method.
func (m *MockModifier) InsertDroneDelivery(point gps.Point, calcCost func(itinerary.Info) float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertDroneDelivery", point, calcCost)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertDroneDelivery indicates an expected call of InsertDroneDelivery.
func (mr *MockModifierMockRecorder) InsertDroneDelivery(point, calcCost any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertDroneDelivery", reflect.TypeOf((*MockModifier)(nil).InsertDroneDelivery), point, calcCost)
}

// MainRoute mocks base method.
func (m *MockModifier) MainRoute() route.IMainRoute {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MainRoute")
	ret0, _ := ret[0].(route.IMainRoute)
	return ret0
}

// MainRoute indicates an expected call of MainRoute.
func (mr *MockModifierMockRecorder) MainRoute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MainRoute", reflect.TypeOf((*MockModifier)(nil).MainRoute))
}

// RemoveDroneStopFromFlight mocks base method.
func (m *MockModifier) RemoveDroneStopFromFlight(index int, flight route.ISubRoute) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveDroneStopFromFlight", index, flight)
}

// RemoveDroneStopFromFlight indicates an expected call of RemoveDroneStopFromFlight.
func (mr *MockModifierMockRecorder) RemoveDroneStopFromFlight(index, flight any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveDroneStopFromFlight", reflect.TypeOf((*MockModifier)(nil).RemoveDroneStopFromFlight), index, flight)
}

// RemoveMainStopFromRoute mocks base method.
func (m *MockModifier) RemoveMainStopFromRoute(index int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveMainStopFromRoute", index)
}

// RemoveMainStopFromRoute indicates an expected call of RemoveMainStopFromRoute.
func (mr *MockModifierMockRecorder) RemoveMainStopFromRoute(index any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveMainStopFromRoute", reflect.TypeOf((*MockModifier)(nil).RemoveMainStopFromRoute), index)
}

// RouteIterator mocks base method.
func (m *MockModifier) RouteIterator() slc.Iterator[route.IMainStop] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RouteIterator")
	ret0, _ := ret[0].(slc.Iterator[route.IMainStop])
	return ret0
}

// RouteIterator indicates an expected call of RouteIterator.
func (mr *MockModifierMockRecorder) RouteIterator() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RouteIterator", reflect.TypeOf((*MockModifier)(nil).RouteIterator))
}

// SubItineraryList mocks base method.
func (m *MockModifier) SubItineraryList() []itinerary.SubItinerary {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubItineraryList")
	ret0, _ := ret[0].([]itinerary.SubItinerary)
	return ret0
}

// SubItineraryList indicates an expected call of SubItineraryList.
func (mr *MockModifierMockRecorder) SubItineraryList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubItineraryList", reflect.TypeOf((*MockModifier)(nil).SubItineraryList))
}
