// Code generated by MockGen. DO NOT EDIT.
// Source: substop.go
//
// Generated by this command:
//
//	mockgen -source=substop.go -destination=mock/substopmock.go
//

// Package mock_route is a generated GoMock package.
package mock_route

import (
	reflect "reflect"

	gps "github.com/victorguarana/vehicle-routing/internal/gps"
	gomock "go.uber.org/mock/gomock"
)

// MockISubStop is a mock of ISubStop interface.
type MockISubStop struct {
	ctrl     *gomock.Controller
	recorder *MockISubStopMockRecorder
}

// MockISubStopMockRecorder is the mock recorder for MockISubStop.
type MockISubStopMockRecorder struct {
	mock *MockISubStop
}

// NewMockISubStop creates a new mock instance.
func NewMockISubStop(ctrl *gomock.Controller) *MockISubStop {
	mock := &MockISubStop{ctrl: ctrl}
	mock.recorder = &MockISubStopMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISubStop) EXPECT() *MockISubStopMockRecorder {
	return m.recorder
}

// IsCustomer mocks base method.
func (m *MockISubStop) IsCustomer() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsCustomer")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsCustomer indicates an expected call of IsCustomer.
func (mr *MockISubStopMockRecorder) IsCustomer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsCustomer", reflect.TypeOf((*MockISubStop)(nil).IsCustomer))
}

// IsWarehouse mocks base method.
func (m *MockISubStop) IsWarehouse() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsWarehouse")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsWarehouse indicates an expected call of IsWarehouse.
func (mr *MockISubStopMockRecorder) IsWarehouse() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsWarehouse", reflect.TypeOf((*MockISubStop)(nil).IsWarehouse))
}

// Latitude mocks base method.
func (m *MockISubStop) Latitude() float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Latitude")
	ret0, _ := ret[0].(float64)
	return ret0
}

// Latitude indicates an expected call of Latitude.
func (mr *MockISubStopMockRecorder) Latitude() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Latitude", reflect.TypeOf((*MockISubStop)(nil).Latitude))
}

// Longitude mocks base method.
func (m *MockISubStop) Longitude() float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Longitude")
	ret0, _ := ret[0].(float64)
	return ret0
}

// Longitude indicates an expected call of Longitude.
func (mr *MockISubStopMockRecorder) Longitude() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Longitude", reflect.TypeOf((*MockISubStop)(nil).Longitude))
}

// Name mocks base method.
func (m *MockISubStop) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockISubStopMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockISubStop)(nil).Name))
}

// Point mocks base method.
func (m *MockISubStop) Point() gps.Point {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Point")
	ret0, _ := ret[0].(gps.Point)
	return ret0
}

// Point indicates an expected call of Point.
func (mr *MockISubStopMockRecorder) Point() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Point", reflect.TypeOf((*MockISubStop)(nil).Point))
}
